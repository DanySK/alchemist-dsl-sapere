/*
 * Copyright (C) 2010-2014, Danilo Pianini and contributors
 * listed in the project's pom.xml file.
 * 
 * This file is part of Alchemist, and is distributed under the terms of
 * the GNU General Public License, with a linking exception, as described
 * in the file LICENSE in the Alchemist distribution's top directory.
 */
/*
 * generated by Xtext
 */
package it.unibo.alchemist.language.generator

import it.unibo.alchemist.language.saperedsl.Environment
import java.util.StringTokenizer
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

class SapereDSLGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val file = doGenerateString(resource)
		val name = new StringTokenizer(resource.URI.lastSegment, ".")
		fsa.generateFile('''«name.nextElement».xml''', file)
	}
	
	def doGenerateString(Resource resource) {
		new EnvironmentGen(resource.allContents.filter(typeof(Environment)).head).generateXML(0)
	}
	
}
